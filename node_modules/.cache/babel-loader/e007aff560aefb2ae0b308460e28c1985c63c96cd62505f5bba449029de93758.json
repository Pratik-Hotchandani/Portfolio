{"ast":null,"code":"import { Absorber } from \"./Options/Classes/Absorber\";\nimport { AbsorberInstance } from \"./AbsorberInstance\";\nimport { itemFromArray } from \"../../Utils\";\nexport class Absorbers {\n  constructor(container) {\n    this.container = container;\n    this.array = [];\n    this.absorbers = [];\n    this.interactivityAbsorbers = [];\n    const overridableContainer = container;\n\n    overridableContainer.getAbsorber = idxOrName => idxOrName === undefined || typeof idxOrName === \"number\" ? this.array[idxOrName || 0] : this.array.find(t => t.name === idxOrName);\n\n    overridableContainer.addAbsorber = (options, position) => this.addAbsorber(options, position);\n  }\n\n  init(options) {\n    var _a, _b;\n\n    if (!options) {\n      return;\n    }\n\n    if (options.absorbers) {\n      if (options.absorbers instanceof Array) {\n        this.absorbers = options.absorbers.map(s => {\n          const tmp = new Absorber();\n          tmp.load(s);\n          return tmp;\n        });\n      } else {\n        if (this.absorbers instanceof Array) {\n          this.absorbers = new Absorber();\n        }\n\n        this.absorbers.load(options.absorbers);\n      }\n    }\n\n    const interactivityAbsorbers = (_b = (_a = options.interactivity) === null || _a === void 0 ? void 0 : _a.modes) === null || _b === void 0 ? void 0 : _b.absorbers;\n\n    if (interactivityAbsorbers) {\n      if (interactivityAbsorbers instanceof Array) {\n        this.interactivityAbsorbers = interactivityAbsorbers.map(s => {\n          const tmp = new Absorber();\n          tmp.load(s);\n          return tmp;\n        });\n      } else {\n        if (this.interactivityAbsorbers instanceof Array) {\n          this.interactivityAbsorbers = new Absorber();\n        }\n\n        this.interactivityAbsorbers.load(interactivityAbsorbers);\n      }\n    }\n\n    if (this.absorbers instanceof Array) {\n      for (const absorberOptions of this.absorbers) {\n        this.addAbsorber(absorberOptions);\n      }\n    } else {\n      this.addAbsorber(this.absorbers);\n    }\n  }\n\n  particleUpdate(particle) {\n    for (const absorber of this.array) {\n      absorber.attract(particle);\n\n      if (particle.destroyed) {\n        break;\n      }\n    }\n  }\n\n  draw(context) {\n    for (const absorber of this.array) {\n      context.save();\n      absorber.draw(context);\n      context.restore();\n    }\n  }\n\n  stop() {\n    this.array = [];\n  }\n\n  resize() {\n    for (const absorber of this.array) {\n      absorber.resize();\n    }\n  }\n\n  handleClickMode(mode) {\n    const container = this.container;\n    const absorberOptions = this.absorbers;\n    const modeAbsorbers = this.interactivityAbsorbers;\n\n    if (mode === \"absorber\") {\n      let absorbersModeOptions;\n\n      if (modeAbsorbers instanceof Array) {\n        if (modeAbsorbers.length > 0) {\n          absorbersModeOptions = itemFromArray(modeAbsorbers);\n        }\n      } else {\n        absorbersModeOptions = modeAbsorbers;\n      }\n\n      const absorbersOptions = absorbersModeOptions !== null && absorbersModeOptions !== void 0 ? absorbersModeOptions : absorberOptions instanceof Array ? itemFromArray(absorberOptions) : absorberOptions;\n      const aPosition = container.interactivity.mouse.clickPosition;\n      this.addAbsorber(absorbersOptions, aPosition);\n    }\n  }\n\n  addAbsorber(options, position) {\n    const absorber = new AbsorberInstance(this, this.container, options, position);\n    this.array.push(absorber);\n    return absorber;\n  }\n\n  removeAbsorber(absorber) {\n    const index = this.array.indexOf(absorber);\n\n    if (index >= 0) {\n      this.array.splice(index, 1);\n    }\n  }\n\n}","map":{"version":3,"sources":["C:/Users/prati/OneDrive/Desktop/pratik-hotchandani.github.io/node_modules/tsparticles/esm/Plugins/Absorbers/Absorbers.js"],"names":["Absorber","AbsorberInstance","itemFromArray","Absorbers","constructor","container","array","absorbers","interactivityAbsorbers","overridableContainer","getAbsorber","idxOrName","undefined","find","t","name","addAbsorber","options","position","init","_a","_b","Array","map","s","tmp","load","interactivity","modes","absorberOptions","particleUpdate","particle","absorber","attract","destroyed","draw","context","save","restore","stop","resize","handleClickMode","mode","modeAbsorbers","absorbersModeOptions","length","absorbersOptions","aPosition","mouse","clickPosition","push","removeAbsorber","index","indexOf","splice"],"mappings":"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","sourcesContent":["import { Absorber } from \"./Options/Classes/Absorber\";\r\nimport { AbsorberInstance } from \"./AbsorberInstance\";\r\nimport { itemFromArray } from \"../../Utils\";\r\nexport class Absorbers {\r\n    constructor(container) {\r\n        this.container = container;\r\n        this.array = [];\r\n        this.absorbers = [];\r\n        this.interactivityAbsorbers = [];\r\n        const overridableContainer = container;\r\n        overridableContainer.getAbsorber = (idxOrName) => idxOrName === undefined || typeof idxOrName === \"number\"\r\n            ? this.array[idxOrName || 0]\r\n            : this.array.find((t) => t.name === idxOrName);\r\n        overridableContainer.addAbsorber = (options, position) => this.addAbsorber(options, position);\r\n    }\r\n    init(options) {\r\n        var _a, _b;\r\n        if (!options) {\r\n            return;\r\n        }\r\n        if (options.absorbers) {\r\n            if (options.absorbers instanceof Array) {\r\n                this.absorbers = options.absorbers.map((s) => {\r\n                    const tmp = new Absorber();\r\n                    tmp.load(s);\r\n                    return tmp;\r\n                });\r\n            }\r\n            else {\r\n                if (this.absorbers instanceof Array) {\r\n                    this.absorbers = new Absorber();\r\n                }\r\n                this.absorbers.load(options.absorbers);\r\n            }\r\n        }\r\n        const interactivityAbsorbers = (_b = (_a = options.interactivity) === null || _a === void 0 ? void 0 : _a.modes) === null || _b === void 0 ? void 0 : _b.absorbers;\r\n        if (interactivityAbsorbers) {\r\n            if (interactivityAbsorbers instanceof Array) {\r\n                this.interactivityAbsorbers = interactivityAbsorbers.map((s) => {\r\n                    const tmp = new Absorber();\r\n                    tmp.load(s);\r\n                    return tmp;\r\n                });\r\n            }\r\n            else {\r\n                if (this.interactivityAbsorbers instanceof Array) {\r\n                    this.interactivityAbsorbers = new Absorber();\r\n                }\r\n                this.interactivityAbsorbers.load(interactivityAbsorbers);\r\n            }\r\n        }\r\n        if (this.absorbers instanceof Array) {\r\n            for (const absorberOptions of this.absorbers) {\r\n                this.addAbsorber(absorberOptions);\r\n            }\r\n        }\r\n        else {\r\n            this.addAbsorber(this.absorbers);\r\n        }\r\n    }\r\n    particleUpdate(particle) {\r\n        for (const absorber of this.array) {\r\n            absorber.attract(particle);\r\n            if (particle.destroyed) {\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    draw(context) {\r\n        for (const absorber of this.array) {\r\n            context.save();\r\n            absorber.draw(context);\r\n            context.restore();\r\n        }\r\n    }\r\n    stop() {\r\n        this.array = [];\r\n    }\r\n    resize() {\r\n        for (const absorber of this.array) {\r\n            absorber.resize();\r\n        }\r\n    }\r\n    handleClickMode(mode) {\r\n        const container = this.container;\r\n        const absorberOptions = this.absorbers;\r\n        const modeAbsorbers = this.interactivityAbsorbers;\r\n        if (mode === \"absorber\") {\r\n            let absorbersModeOptions;\r\n            if (modeAbsorbers instanceof Array) {\r\n                if (modeAbsorbers.length > 0) {\r\n                    absorbersModeOptions = itemFromArray(modeAbsorbers);\r\n                }\r\n            }\r\n            else {\r\n                absorbersModeOptions = modeAbsorbers;\r\n            }\r\n            const absorbersOptions = absorbersModeOptions !== null && absorbersModeOptions !== void 0 ? absorbersModeOptions : (absorberOptions instanceof Array ? itemFromArray(absorberOptions) : absorberOptions);\r\n            const aPosition = container.interactivity.mouse.clickPosition;\r\n            this.addAbsorber(absorbersOptions, aPosition);\r\n        }\r\n    }\r\n    addAbsorber(options, position) {\r\n        const absorber = new AbsorberInstance(this, this.container, options, position);\r\n        this.array.push(absorber);\r\n        return absorber;\r\n    }\r\n    removeAbsorber(absorber) {\r\n        const index = this.array.indexOf(absorber);\r\n        if (index >= 0) {\r\n            this.array.splice(index, 1);\r\n        }\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}